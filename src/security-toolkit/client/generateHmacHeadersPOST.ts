/**
 * @file generateHmacHeadersPOST.ts
 * 
 * @description 
 * üîê –§–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ POST-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Web Crypto API ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.
 *
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç:
 * ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (`x-body-hash`)
 * ‚úÖ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (`x-timestamp`)
 * ‚úÖ –ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (`x-signature`)
 * ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (`x-nonce`)
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 *   1. SHA-256 –æ—Ç JSON —Ç–µ–ª–∞ ‚Üí `x-body-hash`
 *   2. HMAC_SHA256(timestamp + hash, secret) ‚Üí `x-signature`
 */

import { bufferToHex } from './cryptoUtils';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * @param {object} body - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ JSON.stringify)
 * @param {string} sharedSecret - –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (shared –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º)
 * @returns {{ [key: string]: string }} ‚Äî –æ–±—ä–µ–∫—Ç —Å 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
export async function generateHmacHeadersPOST(
    body: object,
    sharedSecret: string
): Promise<Record<string, string>> {
    const timestamp = new Date().toISOString();
    const json = JSON.stringify(body);
    const encoder = new TextEncoder();
    const nonce = uuidv4(); // üìõ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    
    // SHA-256 —Ö–µ—à —Ç–µ–ª–∞
    const bodyData = encoder.encode(json);
    const bodyHashBuffer = await crypto.subtle.digest('SHA-256', bodyData);
    const bodyHash = bufferToHex(bodyHashBuffer);

    // –ò–º–ø–æ—Ä—Ç —Å–µ–∫—Ä–µ—Ç–∞
    const secretKey = await crypto.subtle.importKey(
        'raw',
        encoder.encode(sharedSecret),
        { name: 'HMAC', hash: 'SHA-256' },
        false,
        ['sign']
    );

    // –ü–æ–¥–ø–∏—Å—å: HMAC(timestamp + hash)
    const toSign = encoder.encode(`${timestamp}:${bodyHash}:${nonce}`);
    const signatureBuffer = await crypto.subtle.sign('HMAC', secretKey, toSign);
    const signature = bufferToHex(signatureBuffer);

    return {
        'x-timestamp': timestamp,
        'x-nonce': nonce,
        'x-body-hash': bodyHash,
        'x-signature': signature,
    };
}
