/**
 * @file generateHmacHeadersGET.ts
 * 
 * @description 
 * üîê –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ GET-–∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ query-based –∑–∞–ø—Ä–æ—Å–∞).
 *
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç:
 * ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (`wallet`, `timestamp`)
 * ‚úÖ –ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (`x-signature`)
 * ‚úÖ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (`x-timestamp`)
 * ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (`x-nonce`)
 */

import { bufferToHex } from './cryptoUtils';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 *   1. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ `timestamp:wallet`
 *   2. –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ HMAC_SHA256 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
 *   3. –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞:
 *      - `x-wallet` ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 *      - `x-timestamp` ‚Äî UNIX timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (UTC)
 *      - `x-nonce` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID
 *      - `x-signature` ‚Äî HMAC-–ø–æ–¥–ø–∏—Å—å
 *
 * @param {string} wallet ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 * @param {string} sharedSecret ‚Äî –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç (shared –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º)
 * @returns {{ [key: string]: string }} ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 */
export async function generateHmacHeadersGET(
  wallet: string,
  sharedSecret: string
): Promise<Record<string, string>> {
  const timestamp = Math.floor(Date.now() / 1000); // UNIX timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const nonce = uuidv4(); // üìõ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
  const encoder = new TextEncoder();
  const message = encoder.encode(`${timestamp}:${wallet}:${nonce}`);

  console.log(`[SIGNATURE] ts: ${timestamp} (${new Date(timestamp * 1000).toISOString()}), nonce: ${nonce}`);


  // üîê –ò–º–ø–æ—Ä—Ç —Å–µ–∫—Ä–µ—Ç–∞
  const key = await crypto.subtle.importKey(
    'raw',
    encoder.encode(sharedSecret),
    { name: 'HMAC', hash: 'SHA-256' },
    false,
    ['sign']
  );

  // ‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏
  const signatureBuffer = await crypto.subtle.sign('HMAC', key, message);
  const signature = bufferToHex(signatureBuffer);

  return {
    'x-timestamp': timestamp.toString(), 
    'x-wallet': wallet,
    'x-nonce': nonce,
    'x-signature': signature,
  };
}
