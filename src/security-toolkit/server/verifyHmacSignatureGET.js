/**
 * @file verifyHmacSignatureGET.js
 * 
 * @description –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è HMAC-–ø–æ–¥–ø–∏—Å–∏ –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å query –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * ‚úÖ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (`x-timestamp`)
 * ‚úÖ –ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (`x-signature`)
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:
 *   HMAC_SHA256(`${timestamp}:${wallet}`, sharedSecret)
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
 * - x-wallet ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 * - x-timestamp ‚Äî –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
 * - x-signature ‚Äî –ø–æ–¥–ø–∏—Å—å HMAC_SHA256(timestamp:wallet, secret)
 *
 * üßæ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî 10 –º–∏–Ω—É—Ç
 * ‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
 * ‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
 * ‚úÖ –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ Telegram —á–µ—Ä–µ–∑ WatchDog (safeSendMessage)
 */

import crypto from 'crypto';
import { safeSendMessage } from './bots/telegramBotWatchDog.mjs';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC-–ø–æ–¥–ø–∏—Å–∏ –∏–∑ query-–∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 *
 * @param {import('express').Request} req ‚Äî HTTP-–∑–∞–ø—Ä–æ—Å Express
 * @param {string} sharedSecret ‚Äî –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (shared –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º)
 * @returns {boolean} ‚Äî true, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
 */
export function verifyHmacSignatureGET(req, sharedSecret) {
  try {
    const timestamp = parseInt(req.headers['x-timestamp'], 10);
    const wallet = req.headers['x-wallet'];
    const signature = req.headers['x-signature'];
    const hashHMAC = crypto.createHash('md5').update(`${req.ip}:${wallet ?? '‚ùì'}`).digest('hex').slice(0, 8);
    
    if (!timestamp || !wallet || !signature) {
      safeSendMessage(
        `hmac-query|missing|${hashHMAC}|${req.ip.slice(-6)}`,
        `üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏:
- wallet: ${wallet ?? '‚ùì'}
- ip: ${req.ip}
- url: ${req.originalUrl}
- user-agent: ${req.headers['user-agent'] ?? '‚ùå UA –Ω–µ —É–∫–∞–∑–∞–Ω'}
- referer: ${req.headers['referer'] ?? '‚Äî'}
- x-forwarded-for: ${req.headers['x-forwarded-for'] ?? '‚Äî'}
- time: ${new Date().toISOString()}`
      );      
      console.warn('[verifyHmacSignatureQuery] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
      return false;
    }

    if (!sharedSecret || typeof sharedSecret !== 'string' || sharedSecret.length < 10) {
      safeSendMessage(
        `hmac-query|sharedSecretMissing|${hashHMAC}|${req.ip.slice(-6)}`,
        `‚ùó sharedSecret –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:
- wallet: ${wallet}
- ip: ${req.ip}
- url: ${req.originalUrl}
- user-agent: ${req.headers['user-agent'] ?? '‚ùå UA –Ω–µ —É–∫–∞–∑–∞–Ω'}
- referer: ${req.headers['referer'] ?? '‚Äî'}
- x-forwarded-for: ${req.headers['x-forwarded-for'] ?? '‚Äî'}
- time: ${new Date().toISOString()}`
      );
      console.error('[verifyHmacSignatureQuery] ‚ùó sharedSecret –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      return false;
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ–∫–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ (¬±5 –º–∏–Ω—É—Ç) - –¥–æ 10 –º–∏–Ω—É—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
    const now = Math.floor(Date.now() / 1000); // —Ç–µ–∫—É—â–∏–π unixtime –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const drift = Math.abs(now - timestamp);
    const maxDrift = 300; // 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥

    if (drift > maxDrift) {
      const level = drift < 600 ? '‚ö†Ô∏è' : '‚õîÔ∏è'; 
      safeSendMessage(
        `hmac-query|drift|${hashHMAC}|${req.ip.slice(-6)}`,
        `${level} –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:
wallet: ${wallet}
—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${drift} —Å–µ–∫
ip: ${req.ip}
originalUrl: ${req.originalUrl}
user-agent: ${req.headers['user-agent']}
timestamp: ${timestamp}
now: ${now}`
      );
      console.warn('[verifyHmacSignatureQuery] ‚è∞ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞');
      return drift < 600;  // —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
    }

    // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º HMAC
    const data = `${timestamp}:${wallet}`;
    const expectedSignature = crypto
      .createHmac('sha256', sharedSecret)
      .update(data)
      .digest('hex');

    if (expectedSignature !== signature) {
      safeSendMessage(
        `hmac-query|invalid|${hashHMAC}|${req.ip.slice(-6)}`,
        `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è HMAC-–ø–æ–¥–ø–∏—Å—å:
wallet: ${wallet}
ip: ${req.ip}
–û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedSignature}
–ü–æ–ª—É—á–µ–Ω–æ: ${signature}`
      );
      return false;
    }

    return true;
  } catch (error) {
    safeSendMessage(
      `hmac-query|exception|${hashHMAC}|${req.ip.slice(-6)}`,
      `‚ùó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HMAC:
${error.message}
wallet: ${req.headers['x-wallet'] ?? '‚ùì'}
ip: ${req.ip}`
    );
    console.error('[verifyHmacSignatureQuery] ‚ùó –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HMAC-–ø–æ–¥–ø–∏—Å–∏:', error.message);
    return false;
  }
}