/**
 * @file withHmacHash.js
 * 
 * @description 
 * üîê –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞ —Å —Ö–µ—à–æ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (HMAC-SHA256 –∏–ª–∏ SHA256) –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `x-response-hash`
 * –∏ —Ç–∏–ø–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `x-hash-algorithm`.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º.
 * –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ JSON-–æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–æ–¥–º–µ–Ω—ë–Ω –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω –ø—Ä–æ–∫—Å–∏, CDN, MITM –∏ —Ç.–¥.
 * 
 * üîê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - HMAC-SHA256 (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω `secret`)
 * - SHA256 (–µ—Å–ª–∏ `secret === null`)
 * - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: x-response-hash
 * - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ WatchDog (`safeSendMessage`)
 * 
 * üîê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - HMAC-SHA256 (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω `secret`)
 * - SHA256 (–µ—Å–ª–∏ `secret === null`)
 * - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: x-response-hash
 *
 * üì¶ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 *
 * import { withHmacHash } from './utils/withHmacHash.js';
 *
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å —Å–µ–∫—Ä–µ—Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ process.env)
 * app.get('/api/data', (req, res) => {
 *   const data = { status: 'ok', value: 42 };
 *   withHmacHash(req, res, data);
 * });
 *
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞ (SHA256)
 * app.get('/api/public', (req, res) => {
 *   const data = { public: true };
 *   withHmacHash(req, res, data, null);
 * });
 */

import crypto from 'crypto';
import { safeSendMessage } from './bots/telegramBotWatchDog.mjs';

/**
 * –°—á–∏—Ç–∞–µ—Ç HMAC-SHA256 —Ö–µ—à –æ—Ç —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
 * @param {Object} body - –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ JSON
 * @param {string} secret - –µ—Å–ª–∏ null ‚Üí SHA256, –∏–Ω–∞—á–µ HMAC
 * @returns {string} - { hash, algorithm }
 */
function computeResponseHash(body, secret) {
    const jsonString = JSON.stringify(body);

    if (secret === null) {
        return {
        hash: crypto.createHash('sha256').update(jsonString).digest('hex'),
        algorithm: 'sha256',
        };
    }

    if (!secret || typeof secret !== 'string') {
        throw new Error(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–µ–∫—Ä–µ—Ç : ${secret}`);
    }

    return {
        hash: crypto.createHmac('sha256', secret).update(jsonString).digest('hex'),
        algorithm: 'hmac-sha256',
    };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:
 * - `x-response-hash` ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–µ—à–∞
 * - `x-hash-algorithm` ‚Äî —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (`sha256` –∏–ª–∏ `hmac-sha256`)
 * 
 * @param {Object} req - Express Request (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)
 * @param {Object} res - Express Response
 * @param {Object} data - JSON-–æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
 * @param {string} [secret] - —Å–µ–∫—Ä–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env, null = SHA256)
 */
export function withHmacHash(req, res, data, secret = process.env.HMAC_SECRET ?? null) {
    try {
        const { hash, algorithm } = computeResponseHash(data, secret);
        res.set('x-response-hash', hash);
        res.set('x-hash-algorithm', algorithm);
        res.json(data);
    } catch (error) {
        safeSendMessage(
        `withHmacHash|${error.message}`,              // –∫–ª—é—á –¥–ª—è deduplication
        `‚ùå withHmacHash: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ :\n${error.stack || error.message}` // —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        );
        res.status(500).json({
        error: 'Internal Server Error',
        reason: 'Hash generation failed'
        });
    }
}