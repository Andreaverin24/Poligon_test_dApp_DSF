/**
 * @file generateHmacHeadersGET.js
 *
 * @description
 * üîê –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ GET-–∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏).
 *
 * ‚úÖ x-wallet ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ ID
 * ‚úÖ x-timestamp ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
 * ‚úÖ x-signature ‚Äî HMAC-SHA256(`${timestamp}:${wallet}`, secret)
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ (Node.js)
 */

import crypto from 'crypto';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ `${timestamp}:${wallet}`
 * 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ HMAC_SHA256 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
 * 3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç:
 *    - `x-wallet` ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 *    - `x-timestamp` ‚Äî UNIX timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 *    - `x-signature` ‚Äî HMAC-–ø–æ–¥–ø–∏—Å—å
 *
 * @param {string} wallet ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 * @param {string} sharedSecret ‚Äî –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç
 * @returns {{ [key: string]: string }} ‚Äî –æ–±—ä–µ–∫—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
export function generateHmacHeadersGET(wallet, sharedSecret) {
    if (!wallet || typeof wallet !== 'string') {
        throw new Error('Invalid wallet address');
    }
    if (!sharedSecret || typeof sharedSecret !== 'string') {
        throw new Error('Missing or invalid shared secret');
    }

    const timestamp = Math.floor(Date.now() / 1000);
    const message = `${timestamp}:${wallet}`;
    const signature = crypto
        .createHmac('sha256', sharedSecret)
        .update(message)
        .digest('hex');

    return {
        'x-timestamp': timestamp.toString(),
        'x-wallet': wallet,
        'x-signature': signature,
    };
}