/**
 * @file generateHmacHeadersPOST.js
 *
 * @description
 * üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ POST-–∑–∞–ø—Ä–æ—Å–∞ (server-to-server, Node.js).
 *
 * ‚úÖ x-timestamp ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (ISO-8601)
 * ‚úÖ x-body-hash ‚Äî SHA-256 –æ—Ç —Ç–µ–ª–∞
 * ‚úÖ x-signature ‚Äî HMAC-SHA256(`${timestamp}${bodyHash}`, secret)
 */

import crypto from 'crypto';

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±—É—Ñ–µ—Ä –≤ hex-—Å—Ç—Ä–æ–∫—É
 * @param {Buffer} buffer
 * @returns {string}
 */
function bufferToHex(buffer) {
  return buffer.toString('hex');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HMAC-–∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ POST-–∑–∞–ø—Ä–æ—Å–∞.
 *
 * @param {object} body - —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON-–æ–±—ä–µ–∫—Ç)
 * @param {string} sharedSecret - –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç
 * @returns {{ [key: string]: string }}
 */
export function generateHmacHeadersPOST(body, sharedSecret) {
  const timestamp = new Date().toISOString();
  const json = JSON.stringify(body);

  // SHA-256 —Ö–µ—à —Ç–µ–ª–∞
  const bodyHash = crypto.createHash('sha256').update(json).digest('hex');

  // –ü–æ–¥–ø–∏—Å—å HMAC(timestamp + bodyHash)
  const message = `${timestamp}${bodyHash}`;
  const signature = crypto.createHmac('sha256', sharedSecret).update(message).digest('hex');

  return {
    'x-timestamp': timestamp,
    'x-body-hash': bodyHash,
    'x-signature': signature,
  };
}