/**
 * @file verifyResponseHash.js
 * 
 * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Ö–µ—à—É.
 * 
 * üîê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
 * - SHA-256 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 * - HMAC-SHA256 (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–µ–∫—Ä–µ—Ç)
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥—Ä—É–≥–∏–º–∏ API.
 */

import crypto from 'crypto';

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Buffer –≤ hex-—Å—Ç—Ä–æ–∫—É
 * @param {Buffer} buffer
 * @returns {string}
 */
function bufferToHex(buffer) {
    return buffer.toString('hex');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
 *
 * @param {string} responseText - –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON)
 * @param {string} expectedHash - –•–µ—à, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
 * @param {'sha256' | 'hmac-sha256'} algorithm
 * @param {string|null} secret - –ö–ª—é—á –¥–ª—è HMAC (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è HMAC-SHA256)
 * @returns {boolean}
 */
export function verifyResponseHash(responseText, expectedHash, algorithm = 'sha256', secret = process.env.HMAC_SECRET || null) {
    if (!responseText || !expectedHash) {
        console.warn('‚ùå –ù–µ—Ç —Ç–µ–ª–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ö–µ—à–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        return false;
    }

    try {
        const data = Buffer.from(responseText, 'utf-8');
        let actualHash;

        if (algorithm.toLowerCase() === 'sha256') {
            const hash = crypto.createHash('sha256').update(data).digest();
            actualHash = bufferToHex(hash);
        } else if (algorithm.toLowerCase() === 'hmac-sha256') {
            if (!secret) {
                console.warn('‚ùå HMAC-—Å–µ–∫—Ä–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω');
                return false;
            }
            const hmac = crypto.createHmac('sha256', secret).update(data).digest();
            actualHash = bufferToHex(hmac);
        } else {
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${algorithm}`);
            return false;
        }

        return actualHash === expectedHash.toLowerCase();
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–µ—à–∞: ${err.message}`);
        return false;
    }
}

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ç–µ–ª–∞
 *
 * @param {Response} response - –û—Ç–≤–µ—Ç fetch/axios (Node Fetch —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
 * @param {string|null} secret
 * @returns {Promise<{ valid: boolean, body: string }>}
 */
export async function verifyResponseFromHeadersWithBody(response, secret = process.env.HMAC_SECRET || null) {
    const expectedHash = response.headers.get('x-response-hash');
    const algorithm = response.headers.get('x-hash-algorithm')?.toLowerCase() || 'sha256';
    const bodyText = await response.text();

    const valid = expectedHash
        ? verifyResponseHash(bodyText, expectedHash, algorithm, secret)
        : false;

    return { valid, body: bodyText };
}
