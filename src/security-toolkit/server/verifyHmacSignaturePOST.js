/**
 * @file verifyHmacSignaturePOST.js
 * 
 * @description –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è HMAC-–ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö POST-–∑–∞–ø—Ä–æ—Å–æ–≤.
 *
 * ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (`x-body-hash`)
 * ‚úÖ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (`x-timestamp`, –Ω–µ —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫)
 * ‚úÖ –ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (`x-signature`)
 *
 * üßæ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * ‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
 * ‚úÖ –•–µ—à —Ç–µ–ª–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å
 * ‚úÖ –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫
 * ‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å
 * ‚úÖ –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ª–æ–≥ –≤ Telegram —á–µ—Ä–µ–∑ safeSendMessage
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:
 *   HMAC_SHA256(`${timestamp}${bodyHash}`, sharedSecret)
 *
 * –¢—Ä–µ–±—É–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
 * ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
 * ‚îÇ x-timestamp          ‚îÇ ISO-—Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, new Date().toISOString()) ‚îÇ
 * ‚îÇ x-body-hash          ‚îÇ SHA-256 —Ö–µ—à –æ—Ç JSON.stringify —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞              ‚îÇ
 * ‚îÇ x-signature          ‚îÇ HMAC_SHA256(x-timestamp + x-body-hash, SHARED_SECRET)   ‚îÇ
 * ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
 */

import crypto from 'crypto';
import { safeSendMessage } from './bots/telegramBotWatchDog.mjs';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC-–ø–æ–¥–ø–∏—Å–∏ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
 *
 * @param {import('express').Request} req ‚Äî HTTP-–∑–∞–ø—Ä–æ—Å Express
 * @param {string} sharedSecret ‚Äî –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env)
 * @returns {boolean} true, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
 */
export function verifyHmacSignaturePOST(req, sharedSecret = process.env.SHARED_SECRET) {
    try {
        const timestamp = req.headers['x-timestamp'];       // –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        const signature = req.headers['x-signature'];       // HMAC-–ø–æ–¥–ø–∏—Å—å
        const clientHash = req.headers['x-body-hash'];      // –•–µ—à —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        const now = Date.now();
    
        // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if (!timestamp || !signature || !clientHash) {
            safeSendMessage(
            `hmac-strict|missing`,
            `üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏:\n- x-timestamp: ${timestamp ?? '‚ùì'}\n- x-body-hash: ${clientHash ?? '‚ùì'}\n- x-signature: ${signature ?? '‚ùì'}\nip: ${req.ip}`
            );
            return false;
        }
    
        // üì¶ –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–æ –∏ —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const body = JSON.stringify(req.body || {});
        const localHash = crypto.createHash('sha256').update(body).digest('hex');
    
        // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Ä—É—à–µ–Ω–∞
        if (clientHash !== localHash) {
            safeSendMessage(
            `hmac-strict|body-mismatch`,
            `‚ùó –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–µ—à–∞ —Ç–µ–ª–∞:\n–û–∂–∏–¥–∞–ª–æ—Å—å: ${clientHash}\n–í—ã—á–∏—Å–ª–µ–Ω–æ: ${localHash}\nip: ${req.ip}`
            );
            return false;
        }
    
        // ‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–¥–≤–∏–≥ –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ ‚Äî –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
        const ts = new Date(timestamp).getTime();
        const ageMs = Math.abs(now - ts);
        if (isNaN(ts) || ageMs > 30_000) {
            safeSendMessage(
            `hmac-strict|drift`,
            `‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n–†–∞–∑–Ω–∏—Ü–∞: ${Math.round(ageMs / 1000)} —Å–µ–∫\nip: ${req.ip}`
            );
            return false;
        }
    
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: timestamp + bodyHash, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –æ–±—â–∏–º —Å–µ–∫—Ä–µ—Ç–æ–º
        const expectedSignature = crypto
        .createHmac('sha256', sharedSecret)
        .update(timestamp + clientHash)
        .digest('hex');
    
        if (expectedSignature !== signature) {
            safeSendMessage(
            `hmac-strict|invalid`,
            `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:\nip: ${req.ip}\n–û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedSignature}\n–ü–æ–ª—É—á–µ–Ω–æ: ${signature}`
            );
            return false;
        }
    
        return true;
    } catch (error) {
        safeSendMessage(
        `hmac-strict|exception`,
        `‚ùó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HMAC:\n${error.message}\nip: ${req.ip}`
        );
        console.error('[verifyHmacSignatureStrict] ‚ùó –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HMAC:', error.message);
        return false;
    }
}